### Criando um projeto no Angular

```jsx
ng new [project-name]
```

*ng new crud-angular*

Utiliza√ß√£o de roteamento: Y

Pasta **node_modules**: depend√™ncias

**tsconfig.json**: configura√ß√µes typescript do projeto

assets: imagens apenas

### Executar o projeto Angular

```jsx
ng serve
```

Arquivos principais ‚Üí **app.component.ts e app.module.ts**

### Instalando o Angular Material

[https://material.angular.io/guide/getting-started](https://material.angular.io/guide/getting-started)

1. Atrav√©s do npm install : package.json
2. Atrav√©s do ng add: `ng add @angular/material`

### Inserindo elementos do Angular Material

1. Importa:****
    1. No arquivo app.module.ts:
        1. `import {MatToolbarModule} from '@angular/material/toolbar';`
            
            ```
            imports: [
                MatToolbarModule
            ],
            ```
            
2. Agora o elemento est√° acess√≠vel para ser utilizado no app.component.html
    
    ```
    <mat-toolbar color="primary">
    ```
    

Ou seja, importamos o m√≥dulo no **imports** e o Angular faz a exporta√ß√£o dele para ser utilizado no app.component.html

## M√≥dulos:

- Organizar de forma **l√≥gica** a aplica√ß√£o.
- Componentes criados dentro do m√≥dulo possui visibilidade protegida.
- Caso queira utilizar o componente em outro m√≥dulo, √© necess√°rio exportar o componente.

### **Criando o M√≥dulo com roteamento**

```jsx
ng g m [name] --routing
```

### **Criando o Componente dentro do m√≥dulo**

```jsx
ng g c [name-module]/[name-component] 
```

*Foram criados os arquivos de teste, de estilo, html e o componente.*

## Rotas

M√≥dulo de rotas global: **app-routing.module.ts**

Se o caminho estiver vazio, ou seja, apenas o **[localhost:4200](http://localhost:4200)** fa√ßa um redirecionamento para uma rota espec√≠fica:

```tsx
const routes: Routes = [
  { path: '', pathMatch: 'full', redirectTo: 'courses'}
];
```

- No arquivo de rotas do componente, criamos uma rota para ele:
    1. Especificar o caminho, abaixo colocamos o / (em branco) 
    2. Especificar o componente

```tsx
const routes: Routes = [
  { path: '', component: NameComponent}
];
```

Diretiva Angular Material para fazer o roteamento, deve-se inserir no app.component.html: 

```
<router-outlet></router-outlet>
```

No arquivo de rotas global:

Se o caminho for vazio(localhost:4200), redireciona para uma rota inicial definida anteriormente.

Vamos utilizar a rota de Lazyng-loading(carregamento lento)

- ****Lazy-loading feature module****

Para carregar m√≥dulos Angular de forma lenta, use¬†`loadChildren`(em vez de¬†`component`) em sua¬†`AppRoutingModule`¬†`routes`configura√ß√£o da seguinte maneira.

<aside>
üí° loadChildren: Carregue de forma autom√°tica, j√° que este √© um m√≥dulo filho da aplica√ß√£o.

</aside>

**AppRoutingModule.ts (trecho)**

const routes:

[Routes](https://angular.io/api/router/Routes) = [
  {
    path: 'items',
    loadChildren: () => import('./items/items.module').then(m => m.ItemsModule)
  }
];

Ou seja, o que fizemos em cima foi :

Caso esteja acessando a rota ‚Äúlocalhost:4200/items‚Äù sem nada ap√≥s a barra, redirecione para o NameComponent l√° em cima ^ 

**Resumindo‚Ä¶**

Apenas ao acessar ‚Äúlocalhost:8080/items‚Äù que ser√° carregado todo o m√≥dulo de items. Por padr√£o n√£o √© carregado no Angular.

### **Criando uma interface**

Classe para ajudar em tempo de desenvolvimento, onde podemos verificar os dados sobre o elemento a ser utilizado

```jsx
ng g interface [name]
```

### Configurando as cores do Angular Material para as cores do projeto:

- Material Design: [https://material.io/design/color/the-color-system.html#color-theme-creation](https://material.io/design/color/the-color-system.html#color-theme-creation)

**Arquivo: style.css**

1. importa o theming do angular material:
    
    ```
    @import "@angular/material/theming";
    ```
    
2. inclui o mat-core(): mixing do angular material
3. Define nossas vari√°veis, geralmente s√£o 3 cores: 
    1. Prim√°ria, Secund√°ria e de Warning(erro/aviso, padr√£o vermelho).
    2. Prim√°ria: 
        
        ```
        $custom-app-primary: mat-pallete($mat-purple);
        ```
        
    3. Secund√°ria
        
        ```scss
        $custom-app-secondary: mat-palette($mat-deep-purple, A200, A400, 700);
        ```
        
    4. Erro:
        
        ```scss
        $custom-app-warning: mat-palette($mat-red);
        ```
        
4. Cria√ß√£o do nosso novo tema:
    
    ```
    $custom-theme: mat-light-theme($custom-app-primary, $custom-app-secondary, $custom-app-warning);
    ```
    
5. Sinalizar ao Angular o tema criado:
    
    ```
    @include angular-material-theme($custom-theme);
    ```
    

### **Criando Material Table para Listar elementos:**

1. No m√≥dulo do componente(items.module.ts), importa o mat-table:
    
    ```
    import { MatTableModule } from '@angular/material/table';
    ```
    
    ```
    imports: [
        CommonModule,
        CoursesRoutingModule,
        MatTableModule
      ]
    ```
    

O mat-table utiliza um **dataSource**:

`dataSource = ELEMENT_DATA;`

ELEMENT_DATA √© um array de elementos:

```
const ELEMENT_DATA: PeriodicElement[] = [
  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'}
];
```

1. Cria o dataSource.
    1. no items.component.ts, criamos o dataSource que, inicialmente ser√° do tipo any(qualquer coisa)
        
        ```
        courses: any[] = [];
        ```
        
    2. Criaremos um tipo(interface) para n√£o utilizar o any(m√° pr√°tica). 
        1. Interface s√≥ existe em tempo de desenvolvimento.
        2. Comando: ng g interface items/model/item
            
            ```
            export interface Item {
              _id: string;
              name: string;
              category: string
            }
            ```
            
        

### *Estudar table do angular*

### M√≥dulo shared

> Para que o componente do item n√£o fique muito grande por conta da quantidade de imports, criamos um modulo chamado app-material dentro de uma pasta chamada shared e l√° inserimos todos os imports e exportamos os m√≥dulos para serem utilizados depois na classe items.
> 

> Basta importar o shared/app-material no m√≥dulo de items.
> 

### Classe Servi√ßo

- Fornece: Dados + L√≥gica de Neg√≥cios do m√≥dulo.
- Dados e manipula√ß√£o dos dados para ser enviado para o componente.

Comando para criar um servi√ßo no Angular cli:

**ng g s [nome-modulo]/[services]/[name-service]**

Ser√£o gerados a classe de servi√ßo e a de teste.

Na classe items.component.ts temos o decorator: **@Component** e o decorator implements **OnInit**:

@Component: Indica que √© um **componente**.

OnInit: Faz parte do ciclo de vida de um componente no Angular.

Dentro do decorator **@Component** temos as seguintes propriedades:

- **selector**: ‚Äòapp-items‚Äô ‚Üí Nome do Componente/diretiva, ou seja, tag do HTML que utilizamos caso v√° exportar o componente.

*Da mesma forma que acontece com os componentes do Angular Material.*

- **templateUrl**: ‚Äò./items.component.html‚Äô ‚Üí Endere√ßo do arquivo que cont√©m o HTML para o componente.

- **styleUrls**: [‚Äô./items.component.scss‚Äô] ‚Üí Refer√™ncia para o arquivo de css

J√° na classe items.service.ts temos o decorator **@Injectable**: Faz a inje√ß√£o de depend√™ncia das classes dentro do Angular.

<aside>
‚ö†Ô∏è A classe items.component.ts **N√ÉO** sabe quais s√£o os dados que ser√£o renderizados, a responsabilidade disso √© do **Servi√ßo**.

</aside>

o **Componente** s√≥ precisa saber que vai renderizar uma **lista** de algo, por exemplo.

De onde est√£o vindo os dados da lista √© **irrelevante** para o componente.

Pode vir de uma API ou de um arquivo json local, dados na mem√≥ria e etc.

- A classe se **Servi√ßo** manipula os dados para que fique da forma que o **Componente** est√° esperando.
    - Exemplo:
        
        ```
        export class CoursesComponent implements OnInit {
        
          courses: Course[] = [
            {_id: "1", name: "Angular", category: "front-end"}
          ];
        ```
        
        Ent√£o o Servi√ßo deve renderizar esses elementos da mesma forma que antes o componente renderizava.
        
        Criamos um m√©todo para retornar uma lista de cursos, inicialmente com um curso para testes, chamamos o m√©todo de list:
        
        ```tsx
        list(): Course[]{
            return [
              {_id: "1", name: "Angular", category: "front-end"}
            ];
        ```
        

- Agora precisamos do servi√ßo no componente:
    - No Angular, fazemos a partir da Inje√ß√£o de Depend√™ncias:
        - Declarando a vari√°vel coursesService: CoursesService e inicializando ela no construtor do componente.
            
            ```tsx
            courses: Course[] = [];
              displayedColumns = ["name", "category"];
            
              coursesService: CoursesService;
            
              constructor() {
                this.coursesService = new CoursesService();
                this.courses = this.coursesService.list();
               }
            ```
            

> **Manipula√ß√£o por exemplo do que ser√° retornado no json(caso utilize json) √© feita na classe de Servi√ßo.**
> 

### Chamada ajax para fazer requisi√ß√µes

- **httpClient**
    - √â necess√°rio inserir uma vari√°vel do tipo HttpClient dentro do construtor do **Servi√ßo**.
    - Para que assim, atrav√©s da **inje√ß√£o de depend√™ncia** o angular forne√ßa-o automaticamente.
    

<aside>
üìå Quando criamos um Servi√ßo no Angular, temos a anota√ß√£o **@Injectable** e dentro dela o **provideIn: ‚Äò‚Äôroot‚Äù**, o que significa?

        - Que a inst√¢ncia dessa classe ser√° fornecida apenas na **raiz** do projeto. Ficando assim, dispon√≠vel de maneira global.

</aside>

Precisamos importar o m√≥dulo do HttpClient, por√©m deve ser feito no arquivo **app.module.ts** para que fique dispon√≠vel de forma global.

Dentro do imports, inserimos o HttpClientModule.

Para instanciar o ItemsService de forma autom√°tima no nosso Servi√ßo, precisamos:

Em vez de instanciar e criar o coursesService, injetamos o **Servi√ßo** diretamente no Componente, j√° que o Servi√ßo possui a diretiva **@Injectable:**

```tsx
constructor(private CoursesService: CoursesService) {}
```

A partir do momento que declaramos a vari√°vel dentro do construtor, ela se torna uma vari√°vel da inst√¢ncia/do componente. Sendo assim dentro dela conseguimos acessar o CoursesService.

- Caso prefira que a inst√¢ncia seja feita apenas no momento em que o componente for inicializado, passamos ele para o **ngOnInit()**.
    - Dessa forma:
        
        ```
        ngOnInit(): void {
            this.courses = this.coursesService.list();
          }
        ```
        

### **Chamada HTTP Get no Angular e RXJS**

### **Debugar o RXJS Observables:**

- pipe significa ‚Äúcano‚Äù. Usando operadores do RXJS para fazer a manipula√ß√£o dos dados.
    
    ```
    list(){
        return this.httpClient.get<Course[]>(this.API)
        .pipe(
          tap(courses => console.log(courses))
        );
      }
    ```
    
    ### Adicionando o **Spinner (Carregando):**
    
    1. Importa o MatProgressSpinnerModule 
    
    ```
    import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
    ```
    
    1. A tag que vai no html:
    
    ```
    <mat-spinner></mat-spinner>
    ```
    
    - Agora precisamos informar que o **Spinner** ir√° aparecer at√© que o dados sejam carregados.
    - Para isso utilizamos o **pipe**.
        - O **pipe** no angular tamb√©m serve para transformar os dados.
        - Anota√ß√£o: **async**
        
    
    No HTML, insere:
    
    ```html
    *ng-if="courses | async as courses"
    ```
    
    O pipe async se inscreve dentro do Observable de courses.
    
    Ao mudar a rota da p√°gina e ent√£o o angular destruir ou deixar de utilizar o compoente, o angular faz o **unsubscribe** autm√°ticamente.
    
    Chamamos a vari√°vel de courses para que possamos utiliz√°-la depois.
    
    O m√©todo de listar tem um par√¢metro chamado first(), dessa forma:
    
    ```tsx
    list(){
        return this.httpClient.get<Course[]>(this.API)
        .pipe(
          first(),
          tap(courses => console.log(courses))
        );
      }
    ```
    
    O que o **first()** faz √© informar para o RXJS que assim que obter a primeira resposta, ele deve faz o **unsubscribe** automaticamente.
    
    - Anota√ß√£o de **Observables**:
        - items$
        
    
    Se o observable ainda n√£o retornou os dados, aparece o template de spinner-loading.
    
    Criamos o ng-template com um identificador: **#**(Indica que √© itendifica√ß√£o)
    
    ```html
    <div *ngIf="courses$ | async as courses; else loading">
    </div>
    <ng-template #loading>
        <div class="loading-spinner">
          <mat-spinner></mat-spinner>
        </div>
      </ng-template>
    ```
    
    Precisamos tamb√©m de um tratamento de erros, pois atualmente n√£o temos um ponto de parada, portanto o spinner ir√° ficar rodando infinitamente caso a url que carrega os dados esteja com algum erro.
    
    ### Tratamento de Erros
    
    Quem trata o erro para exibir para o usu√°rio no angular √© **Component**.
    
    O RXJS tem um operador para tratamento de erros chamado **catchError**.
    
    ```tsx
    this.courses$ = this.coursesService.list()
        .pipe(
          catchError(error => {
            return of([]);
          })
        );
    ```
    
    Estamos retornando atrav√©s da anota√ß√£o **of()**, um observable de array vazio.
    
    Ou seja, quando no componente.html fizer a verifica√ß√£o ‚Äú*ngIf="courses$ | async as courses‚Äù, vai retornar que existe uma informa√ß√£o, mesmo que vazia.
    
    **Inserindo uma popup para o usu√°rio:**
    
    - No angular material, podemos usar um Dialog ou uma Snackbar, ou os dois.
    - A popup de erro pode ser √∫til em v√°rios m√≥dulos diferentes, portanto vamos criar uma pasta de m√≥dulo para utilizar componentes compartilhados.
    - Criando o m√≥dulo de shared:
        - ng g m shared
    - Dentro do m√≥dulo criamos o componente:
        - ng g c shared/components/error-dialog
        
    - O componente ser√° utilizado em v√°rios m√≥dulos, portanto precisa ser exportado, no arquivo shared.module.ts:
        
        ```
        imports: [
            CommonModule
          ],
          exports: [ErrorDialogComponent]
        ```
        
        Importamos tamb√©m o MatDialogModule no app-material.module.ts(arquivo de imports para organiza√ß√£o do mesmo).
        
        Portanto precisamos importar esse arquivo no nosso mais novo m√≥dulo shared.module.ts
        
        * Estudar popup/dialog no angular *
        
        ### **Pipe para mostrar √≠cone**
        
        Material Design de icons: [https://fonts.google.com/icons](https://fonts.google.com/icons)
        
        1. Exporta o icons do Angular Material
            
            ```
            <mat-icon aria-hidden="false" aria-label="Example home icon" fontIcon="home"></mat-icon>
            ```
            
        2. Criaremos um  √≠cone diferente para cada categoria
            1. Existe um tipo especial de uma classe no angular chamada pipe, que far√° a transforma√ß√£o do valor:
                1. Vamos criar um pipe dentro do m√≥dulo compartilhado
                    1. Comando: ng g pipe shared/pipes/category
        
        Esse novo tipo do angular, √© uma classe que implementa uma interface do angular chamada **PipeTransform.**
        
        Geralmente s√£o usadas em pipe, por usar fun√ß√µes diretas.
        
        O arquivo category.pipe.ts:
        
        ```tsx
        export class CategoryPipe implements PipeTransform {
          transform(value: string): string {
            switch(value){
              case 'front-end': return 'code';
              case 'back-end': return 'keyboard';
            }
            return 'code';
          }
        }
        ```
        
        code e keyboard s√£o √≠cones do google fonts.
        
        O pipe criado, est√° vis√≠vel apenas dentro do m√≥dulo shared. Precisamos exportar ele tamb√©m no shared.module.ts.
        
        ```tsx
        exports: [
            ErrorDialogComponent,
            CategoryPipe
          ]
        ```
        
    
    ### Utilizando o pipe
    
    No arquivo category.pipe.ts temos o seu nome: 
    
    ```tsx
    @Pipe({
      name: 'category'
    })
    ```
    
    L√° no HTML, em vez de usarmos ‚Äòhome‚Äô, vamos utilizar o pipe ‚Üí | e o nome do pipe ‚Üí category:
    
    ```
    <td mat-cell *matCellDef="let course"> {{course.category}}
              <mat-icon aria-hidden="false" aria-label="Categoria do Curso">{{ course.category | category}}</mat-icon>
            </td>
    ```
    
     
    
    ## **Conectando o Angular na API Spring**
    
    ### Criar arquivo de proxy chamado proxy.conf.js
    
    No mesmo n√≠vel do package.json
    
    Dentro dele temos essa configura√ß√£o:
    
    ```jsx
    **const PROX_CONFIG = [
      {
        context: ['/api'],
        target: 'http://localhost:8080/',
        secure: false,
        logLevel: 'debug'
      }
    ];
    
    module.exports = PROX_CONFIG;**
    ```
